<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JUC 多线程及高并发</title>
      <link href="2020/10/30/JUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%8A%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
      <url>2020/10/30/JUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%8A%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC-多线程及高并发"><a href="#JUC-多线程及高并发" class="headerlink" title="JUC 多线程及高并发"></a>JUC 多线程及高并发</h1><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><ol><li>Volatile 是 Java 虚拟机提供的<code>轻量级</code>的同步解决机制</li></ol><ul><li>保证可见性</li><li><strong>不保证原子性</strong></li><li>禁止指令重排</li></ul><div class="tabs" id="volatile"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#volatile-1">保证可见性</button></li><li class="tab"><button type="button" data-href="#volatile-2">不保证原子性</button></li><li class="tab"><button type="button" data-href="#volatile-3">禁止指令重排</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="volatile-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**标记*/</span></span><br><span class="line">    <span class="keyword">boolean</span> status = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/**切换状态*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        status = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**状态为true , 执行do something*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status) &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>当多线程环境下, 线程A 运行 <code> Demo1.changeStatus()</code> 方法时, 线程B 在运行过程中没法直接观察到 <code>status</code> 的改变, 线程B没法进行相关的操作.</p></li><li><p>使用关键字 <code>    volatile</code> 可以使当前线程A 改变的变量 <code>status</code> 被线程B 所观测 : </p><ul><li><p>当写入一个 <code>volatile</code> 变量时, JVM内存会把该线程对应的<strong>本地内存</strong>强制刷新到<strong>主内存</strong>中</p></li><li><p>这个写入操作会导致其他线程中的<strong>缓存无效</strong></p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> status = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="volatile-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**计数器*/</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**count++*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countPlusPlus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo2 demo2 = <span class="keyword">new</span> Demo2();</span><br><span class="line">        <span class="comment">// 20条线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 没条线程自增1000次</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    demo2.countPlusPlus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// main + gc</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: &quot;</span> + demo2.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030123617938.png" alt="测试结果" style="zoom: 67%;" /><ol><li><p><code>count++</code> 的操作分为3步: </p><ol><li>从主存中获取获取数据 (GETFIELD)</li><li>进行+1操作 (IADD)</li><li>把累加后的值写回主存 (PUTFIELD)</li></ol></li><li><p>多个线程同时读取到了主存中的 <code>count</code> 的初始值 1 ,但只能进行写操作的只有一个线程, 剩余线程还没有来的及修改就进入了堵塞状态, 当某一个线程修改了 <code>count</code> 的值为2 时, 即使 <code>volatile</code> 关键字修饰的值已经已经被其余线程可见, 但读取主存中的 <code>count</code> 的值的操作已经结束, 后续的自增会覆盖之前产生的值, 出现<strong>写丢失</strong>, 使结果小于 20000</p></li><li><p>解决方案</p><ul><li><p>使用 <code>synchronized</code> 加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**count++*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">countPlusPlus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>AtomicInteger</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**计数器*/</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="comment">/**count++*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countPlusPlus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    count.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="volatile-3"><ul><li><p>指令重排的情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030184314062.png" alt="指令重排"></p><ol><li>单线程情况下, 最终执行结果和代码顺序执行结果相同</li><li>处理器在进行重排时, 必须考虑到指令之间的 <code>数据依赖性</code> </li><li>多线程环境下线程交替执行, 由于编译器优化重排的存在, 多个线程中使用的变量无法确定能否保持一致性,无法预测结果</li></ol></li><li><p>指令重排</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer y = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**测试重排优化*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Long.MAX_VALUE; i++) &#123;</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                a = <span class="number">1</span>;</span><br><span class="line">                x = b;</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                b = <span class="number">1</span>;</span><br><span class="line">                x = a;</span><br><span class="line">            &#125;);</span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            <span class="comment">// 不重排: (0,1)(1,1)(1,0) 重排: (0,0)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第: &quot;</span> + i + <span class="string">&quot;次出现: x = &quot;</span> + x + <span class="string">&quot; :: y = &quot;</span> + y);</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a = b = <span class="number">0</span>;</span><br><span class="line">            x = y = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo3 demo3 = <span class="keyword">new</span> Demo3();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            demo3.reOrder();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果 </p><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030134650475.png" alt="测试" style="zoom:67%;" /></li><li><p>内存屏障</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Memory_Barrier</span></div>  <div class="hide-content"><ol><li><code>内存屏障</code> 作用:<ol><li>保证特点操作的执行顺序</li><li>保证某些变量的 <code>内存可见性</code> (是 <code>volatile</code> 的实现原理)</li></ol></li><li>对 <code>volatile</code> 变量写操作后会插入一条 <code>store</code> 指令, 将变量值刷新回主内存中. 对 <code>volatile</code> 变量执行读操作之前会插入一条 <code>load</code> 指令, 从主内存读取共享变量. </li></ol></div></div></li><li><p><code>volatile</code> 禁止重排的规则 : </p><ul><li>当第一个操作是 <code>volatile</code> 读时, 无论第二个是操作, 都不能进行重新排序</li><li>当第一个操作是 <code>volatile</code> 写时, 第二个是<code>volatile</code> 读时, 不能进行重新排序</li><li>当第二个操作是 <code>volatile</code> 写时, 无论第一个是操作, 都不能进行重新排序</li></ul></li></ul><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><ol><li><p><strong>JMM</strong> (Java Memory Model), Java内存模型.是一种<strong>规范</strong>,通过这个规范,定义了: </p><blockquote><p><strong>JMM</strong>定义了程序各个变量( 包括 <code>字段</code>, <code>静态字段</code>, <code>构成数组对象的元素</code> 的访问方式 )</p></blockquote></li><li><p><strong>JMM</strong> 规定:</p><ul><li><p>线程解锁前, 必须把共享变量的值刷新回<strong>主内存</strong></p></li><li><p>线程加锁前, 必须读取主内存中的最新值到自己的<strong>工作内存</strong></p></li><li><p>加锁解锁是同一把锁</p></li></ul></li><li><p>相关知识点</p></li></ol><div class="note success simple"><ol><li><strong>JVM</strong> 运行程序的实体是线程</li><li>每一个线程在创建的时候 <strong>JVM</strong> 都会为其分配一个 <code>工作内存</code> 空间</li><li>工作内存空间是每一个线程的私有数据区域</li><li><strong>JVM</strong> 规定所有的变量都存储在主内存中, 主内存是共享区域, 所有线程都可以访问</li><li>所有线程对变量的 <code>读取,赋值</code> 等操作, 都需要先从 <code>主内存</code> 中将变量拷贝到自己的 <code>工作内存</code> 空间, 操作完变量后将其写回到主内存 </li><li>各个线程的工作内存空间存储着主内存的 <code>变量拷贝副本</code></li><li>各个线程不能直接访问对方的 <code>工作内存</code> 空间, 线程之间的传值必须通过 <code>主内存</code> 完成</li></ol><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030155805080.png" alt="JMM" style="zoom:57%;" /></div><hr><h2 id="Volatile-的使用"><a href="#Volatile-的使用" class="headerlink" title="Volatile 的使用"></a>Volatile 的使用</h2><ol><li><p>单例模式DCL 代码 <code>(Double Check Lock)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;构造方法...&quot;</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">// 检查</span></span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式 volatile 分析</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="2020/10/27/nginx/"/>
      <url>2020/10/27/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-限流策略"><a href="#Nginx-限流策略" class="headerlink" title="Nginx 限流策略"></a>Nginx 限流策略</h1><ul><li>控制速率</li><li>控制并发连接数</li></ul><hr><h1 id="控制速率"><a href="#控制速率" class="headerlink" title="控制速率"></a>控制速率</h1><h2 id="漏桶算法-Leaky-Bucket"><a href="#漏桶算法-Leaky-Bucket" class="headerlink" title="漏桶算法 Leaky Bucket"></a>漏桶算法 <code>Leaky Bucket</code></h2><p><strong>def:</strong> </p><blockquote><p>请求到达桶内,桶会以一定的速度出水,当水流过大时会直接<code>溢出</code>.可以强行限制传输速率.</p></blockquote><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201027152042566.png" alt="nginx漏桶算法原理" style="zoom:67%;" /><p><strong>issue</strong>:</p><ul><li>突发情况请求突然激增,多余平均数的请求会被抛弃</li></ul><p><strong>nginx 配置:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># binary_remote_addr 是一种key 表示基于 remote_addr限流 binary 压缩内存 myRateLimit:10m 划分一个10m的内存空间叫myRateLimit</span></span><br><span class="line"><span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone = myRateLimit:<span class="number">10m</span> rate = 1r/s;</span><br><span class="line">...</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="attribute">location</span> /search/ &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone = one brust=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown测试</title>
      <link href="2020/10/27/markdown%E6%B5%8B%E8%AF%95/"/>
      <url>2020/10/27/markdown%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown-测试"><a href="#markdown-测试" class="headerlink" title="markdown 测试"></a>markdown 测试</h1><div class="note simple"><p>默认提示</p></div><div class="note default simple"><p>default  提示</p></div><div class="note primary simple"><p>primary 提示</p></div><div class="note success simple"><p>success 提示</p></div><div class="note info simple"><p>info 提示</p></div><div class="note warning simple"><p>warning 提示</p></div><div class="note danger simple"><p>danger 提示</p></div><ul><li>无序<ul><li>无序</li></ul></li><li>无序</li></ul><ol><li>有序</li><li>有序<ol><li>有序</li></ol></li></ol><a class="btn-beautify button--animated " href="http://www.baidu.com"   title="Nano"><span>Nano</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">测试  </button><span class="hide-content">测试成功</span></span><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">test 1</button></li><li class="tab"><button type="button" data-href="#test-2">test 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><table><thead><tr><th>测试</th><th>测试</th></tr></thead><tbody><tr><td>测试</td><td>测试</td></tr></tbody></table><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>测试</p><p><a class="btn-beautify button--animated " href="http://www.baidu.com"   title="Nano"><span>Nano</span></a></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> normal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/27/hello-world/"/>
      <url>2020/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
