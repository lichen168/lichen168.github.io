<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JUC 多线程及高并发</title>
      <link href="2020/10/30/JUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%8A%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
      <url>2020/10/30/JUC%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%8A%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h1><h2 id="Volatile-是-Java-虚拟机提供的轻量级的同步解决机制"><a href="#Volatile-是-Java-虚拟机提供的轻量级的同步解决机制" class="headerlink" title="Volatile 是 Java 虚拟机提供的轻量级的同步解决机制"></a>Volatile 是 Java 虚拟机提供的<code>轻量级</code>的同步解决机制</h2><ul><li>保证可见性</li><li><strong>不保证原子性</strong></li><li>禁止指令重排</li></ul><div class="tabs" id="volatile"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#volatile-1">保证可见性</button></li><li class="tab"><button type="button" data-href="#volatile-2">不保证原子性</button></li><li class="tab"><button type="button" data-href="#volatile-3">禁止指令重排</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="volatile-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**标记*/</span></span><br><span class="line">    <span class="keyword">boolean</span> status = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/**切换状态*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        status = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**状态为true , 执行do something*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status) &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>当多线程环境下, 线程A 运行 <code> Demo1.changeStatus()</code> 方法时, 线程B 在运行过程中没法直接观察到 <code>status</code> 的改变, 线程B没法进行相关的操作.</p></li><li><p>使用关键字 <code>    volatile</code> 可以使当前线程A 改变的变量 <code>status</code> 被线程B 所观测 : </p><ul><li><p>当写入一个 <code>volatile</code> 变量时, JVM内存会把该线程对应的<strong>本地内存</strong>强制刷新到<strong>主内存</strong>中</p></li><li><p>这个写入操作会导致其他线程中的<strong>缓存无效</strong></p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> status = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="volatile-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**计数器*/</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**count++*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countPlusPlus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo2 demo2 = <span class="keyword">new</span> Demo2();</span><br><span class="line">        <span class="comment">// 20条线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 没条线程自增1000次</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    demo2.countPlusPlus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// main + gc</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: &quot;</span> + demo2.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030123617938.png" alt="测试结果" style="zoom: 67%;" /><ol><li><p><code>count++</code> 的操作分为3步: </p><ol><li>从主存中获取获取数据 (GETFIELD)</li><li>进行+1操作 (IADD)</li><li>把累加后的值写回主存 (PUTFIELD)</li></ol></li><li><p>多个线程同时读取到了主存中的 <code>count</code> 的初始值 1 ,但只能进行写操作的只有一个线程, 剩余线程还没有来的及修改就进入了堵塞状态, 当某一个线程修改了 <code>count</code> 的值为2 时, 即使 <code>volatile</code> 关键字修饰的值已经已经被其余线程可见, 但读取主存中的 <code>count</code> 的值的操作已经结束, 后续的自增会覆盖之前产生的值, 出现<strong>写丢失</strong>, 使结果小于 20000</p></li><li><p>解决方案</p><ul><li><p>使用 <code>synchronized</code> 加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**count++*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">countPlusPlus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>AtomicInteger</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**计数器*/</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="comment">/**count++*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countPlusPlus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    count.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="volatile-3"><ul><li><p>指令重排的情况</p><p><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030184314062.png" alt="指令重排"></p><ol><li>单线程情况下, 最终执行结果和代码顺序执行结果相同</li><li>处理器在进行重排时, 必须考虑到指令之间的 <code>数据依赖性</code> </li><li>多线程环境下线程交替执行, 由于编译器优化重排的存在, 多个线程中使用的变量无法确定能否保持一致性,无法预测结果</li></ol></li><li><p>指令重排</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer y = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**测试重排优化*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reOrder</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Long.MAX_VALUE; i++) &#123;</span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                a = <span class="number">1</span>;</span><br><span class="line">                x = b;</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                b = <span class="number">1</span>;</span><br><span class="line">                x = a;</span><br><span class="line">            &#125;);</span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            <span class="comment">// 不重排: (0,1)(1,1)(1,0) 重排: (0,0)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第: &quot;</span> + i + <span class="string">&quot;次出现: x = &quot;</span> + x + <span class="string">&quot; :: y = &quot;</span> + y);</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a = b = <span class="number">0</span>;</span><br><span class="line">            x = y = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo3 demo3 = <span class="keyword">new</span> Demo3();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            demo3.reOrder();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果 </p><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030134650475.png" alt="测试" style="zoom:67%;" /></li><li><p>内存屏障</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Memory_Barrier</span></div>  <div class="hide-content"><ol><li><code>内存屏障</code> 作用:<ol><li>保证特点操作的执行顺序</li><li>保证某些变量的 <code>内存可见性</code> (是 <code>volatile</code> 的实现原理)</li></ol></li><li>对 <code>volatile</code> 变量写操作后会插入一条 <code>store</code> 指令, 将变量值刷新回主内存中. 对 <code>volatile</code> 变量执行读操作之前会插入一条 <code>load</code> 指令, 从主内存读取共享变量. </li></ol></div></div></li><li><p><code>volatile</code> 禁止重排的规则 : </p><ul><li>当第一个操作是 <code>volatile</code> 读时, 无论第二个是操作, 都不能进行重新排序</li><li>当第一个操作是 <code>volatile</code> 写时, 第二个是<code>volatile</code> 读时, 不能进行重新排序</li><li>当第二个操作是 <code>volatile</code> 写时, 无论第一个是操作, 都不能进行重新排序</li></ul></li></ul><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><ol><li><p><strong>JMM</strong> (Java Memory Model), Java内存模型.是一种<strong>规范</strong>,通过这个规范,定义了: </p><blockquote><p><strong>JMM</strong>定义了程序各个变量( 包括 <code>字段</code>, <code>静态字段</code>, <code>构成数组对象的元素</code> 的访问方式 )</p></blockquote></li><li><p><strong>JMM</strong> 规定:</p><ul><li><p>线程解锁前, 必须把共享变量的值刷新回<strong>主内存</strong></p></li><li><p>线程加锁前, 必须读取主内存中的最新值到自己的<strong>工作内存</strong></p></li><li><p>加锁解锁是同一把锁</p></li></ul></li><li><p>相关知识点</p></li></ol><div class="note success simple"><ol><li><strong>JVM</strong> 运行程序的实体是线程</li><li>每一个线程在创建的时候 <strong>JVM</strong> 都会为其分配一个 <code>工作内存</code> 空间</li><li>工作内存空间是每一个线程的私有数据区域</li><li><strong>JVM</strong> 规定所有的变量都存储在主内存中, 主内存是共享区域, 所有线程都可以访问</li><li>所有线程对变量的 <code>读取,赋值</code> 等操作, 都需要先从 <code>主内存</code> 中将变量拷贝到自己的 <code>工作内存</code> 空间, 操作完变量后将其写回到主内存 </li><li>各个线程的工作内存空间存储着主内存的 <code>变量拷贝副本</code></li><li>各个线程不能直接访问对方的 <code>工作内存</code> 空间, 线程之间的传值必须通过 <code>主内存</code> 完成</li></ol><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201030155805080.png" alt="JMM" style="zoom:57%;" /></div><hr><h2 id="Volatile-的使用"><a href="#Volatile-的使用" class="headerlink" title="Volatile 的使用"></a>Volatile 的使用</h2><ol><li><p>单例模式DCL 代码 <code>(Double Check Lock)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">&quot;构造方法...&quot;</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">// 检查</span></span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式 volatile 分析</p><ul><li><p>双端检索机制不一定线程安全, 由于有指令重排序, 加入 <code>volatile</code> 可以禁止指令重排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTANCE = <span class="keyword">new</span> Singleton();</span><br></pre></td></tr></table></figure><p><strong>可以分为三个步骤</strong></p><ol><li>memory = allocate();  <code>分配对象内存空间</code></li><li>instance(memory); <code>初始化对象</code></li><li>instance = memory; <code>设置 instance 指向刚分配的内存地址, 此时</code> <strong>instance!=null</strong></li></ol></li></ul></li></ol><div class="note danger simple"><ul><li>步骤2和步骤3 <code>不存在数据依赖关系</code>, 而且无论重排前还是重排后的结果在 <code>单线程</code> 中没有改变, 因此这种重排是允许的</li><li>可能出现的结果<ol><li>memory = allocate();  <code>分配对象内存空间</code></li><li>instance = memory; <code>设置 instance 指向刚分配的内存地址, 此时</code> <strong>instance!=null</strong> , 但是对象没有完成初始化</li><li>instance(memory); <code>初始化对象</code></li></ol></li></ul><p><font color="red" style="font-weight: bold;" >当一条线程访问的 instance 不为 null 时, 由于 instance 实例没有完成初始化, 也就造成了线程安全问题</font></p><p><strong>解决方案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></div><hr><h1 id="CAS-自旋锁"><a href="#CAS-自旋锁" class="headerlink" title="CAS ( 自旋锁 )"></a>CAS ( 自旋锁 )</h1><h2 id="实现-gt-比较并交换"><a href="#实现-gt-比较并交换" class="headerlink" title="实现 -&gt; 比较并交换"></a>实现 -&gt; 比较并交换</h2><ul><li><p><strong>CAS</strong> - &gt; <code>CompareAndSwap</code></p></li><li><p><strong>point</strong> : <code>CAS</code> —&gt; <code>Unsafe</code> —&gt; <code>CAS底层</code> —&gt; <code>ABA</code> —&gt; <code>AtomicRefence</code> </p></li><li><p>比较 - 交换 </p><ul><li><p>简单实现</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">123</span>);</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">123</span>, <span class="number">2020</span>) + <span class="string">&quot;\t current data : &quot;</span> + atomicInteger.get());</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">123</span>, <span class="number">2019</span>) + <span class="string">&quot;\t current data : &quot;</span> + atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031014037308.png" alt="简单的自旋锁机制" style="zoom:67%;" /><ul><li><p>原理实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// this 当前对象 valueOffset 内存偏移量 1 自增量</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>java.util.concurrent.atomic</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到对象的内存偏移量</span></span><br><span class="line">            valueOffset = unsafe.objectFieldOffset(AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// volatile value值可见</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">// todo thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>Unsafe</code><ul><li><strong>CAS</strong>核心类, 由于 Java 无法直接访问底层系统, 需要通过 (<code>native</code>) 方法来访问</li><li><code>Unsafe</code> 是一个后门, 基于该类可以直接操作特定的数据: <code>其内部可以像 C 语言一样操作内存</code></li></ul></li><li><code>valueOffset</code><ul><li>表示该变量在内存中的 <code>偏移位置</code> , <code>Unsafe</code> 通过内存地址偏移量获取数据</li></ul></li><li><code>volatile</code><ul><li>变量用 <code>volatile</code> 修饰, 保证多线程中间的可见性</li></ul></li></ol><p><code>sum.misc.Unsafe</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj 当前对象 offset 偏移量 inc 增量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object obj, <span class="keyword">long</span> offset, <span class="keyword">int</span> inc)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 预期值</span></span><br><span class="line">    <span class="keyword">int</span> future;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 通过内存地址直接获取预期值</span></span><br><span class="line">        future = <span class="keyword">this</span>.getIntVolatile(obj, offset);</span><br><span class="line">        <span class="comment">// 当前对象 obj 的内存地址 offset 上的现在的值 和之前取到的预期值 futrue 进行比较</span></span><br><span class="line">        <span class="comment">// 不相同, 则返回 false ; 相同返回 true 并且 给预期值添加增量 inc</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(obj, offset, future, future + inc));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> future;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>unsafe.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSetInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))&#123;</span><br><span class="line">    oop p = JNIHandles::resolve(obj);</span><br><span class="line">    <span class="comment">// 获取对象的变量的地址</span></span><br><span class="line">    jint* addr = (jint *)index_oop_from_field_offset_long(p, offset);</span><br><span class="line">    <span class="comment">// 调用Atomic操作, 实现交换 x 是即将更新的值 e 是原内存中的值</span></span><br><span class="line">    <span class="keyword">return</span> (jint)(Atomic::cmpxchg(x, addr, e)) == e;</span><br><span class="line">&#125;</span><br><span class="line">UNSAFE_END</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="CAS-原理"><a href="#CAS-原理" class="headerlink" title="CAS 原理"></a>CAS 原理</h2><ul><li><p>CAS 是一条 <code>并发原语</code></p><div class="note primary simple"><ul><li>它的功能是判断内存某个位置的值是否为预期值, 如果是则更改为新的值, 这个过程是 <code>原子</code> 的</li><li>CAS并发原语体现在JAVA语言中就是 <code>sun.misc.Unsafe</code> 类中的各个方法. 调用 <code>UnSafe</code> 类中的CAS方法, JVM会帮我们实现出CAS <code>汇编指令</code> 等. 这是一种完全依赖于 <code>硬件</code> 的功能, 通过它实现了原子操作. 再次强调, 由于CAS是一种 <code>系统 原语 </code> , 原语属于操作系统用语范畴, 是由若干条指令组成的, 用于完成某个功能的一个过程, 并且 <code>原语的执行必须是连续的, 在执行过程中不允许被中断, 也就是说CAS是一条CPU的原子指令 </code> , 不会造成所谓的数据不一致问题.</li></ul></div><hr><h2 id="CAS-缺点"><a href="#CAS-缺点" class="headerlink" title="CAS 缺点"></a>CAS 缺点</h2></li></ul><ol><li><p>循环时间长, 开销大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">        future = <span class="keyword">this</span>.getIntVolatile(obj, offset);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(obj, offset, future, future + inc));</span><br></pre></td></tr></table></figure><div class="note warning simple"><p>如果 CAS 失败, 会一直进行尝试. 如果长时间一直不成功, 可能会给 CPU 带来很大的开销</p></div></li><li><p>只能保证一个共享变量的原子操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object obj, <span class="keyword">long</span> offset, <span class="keyword">int</span> inc)</span></span>;</span><br><span class="line">&amp;&amp;</span><br><span class="line">(jint)(Atomic::cmpxchg(x, addr, e)) == e;</span><br></pre></td></tr></table></figure></li><li><p><strong>ABA</strong> 问题</p><div class="tabs" id="aba"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#aba-1">描述</button></li><li class="tab"><button type="button" data-href="#aba-2">解决技术</button></li><li class="tab"><button type="button" data-href="#aba-3">解决方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="aba-1"><div class="note warning simple"><p>A<del>1</del> 值被他人抢先修改为 B, 后经过他人修改为 A<del>2</del> , 符合 目标值符锁条件, 修改  A<del>2</del> 值为 C</p></div>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABADemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            count.compareAndSet(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;t1操作了count, 原值为: 1 ,修改值为: 2&quot;</span>);</span><br><span class="line">            count.compareAndSet(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;t1操作了count, 原值为: 2 ,修改值为: 1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">while</span> (count.compareAndSet(<span class="number">1</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;判断成功: 预期值相同, 修改后的值为: &quot;</span> + count.get());</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   <img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031134738857.png" alt="ABA_代码"></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="aba-2"><ul><li><p><code>AtomicReference</code> 原子引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User tom = <span class="keyword">new</span> User(<span class="string">&quot;tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        User jerry = <span class="keyword">new</span> User(<span class="string">&quot;jerry&quot;</span>, <span class="number">17</span>);</span><br><span class="line">        AtomicReference&lt;User&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">        atomicReference.set(tom);</span><br><span class="line">        System.out.println(atomicReference.compareAndSet(tom, jerry) + <span class="string">&quot;\t&quot;</span> + atomicReference.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>AtomicStampedReference</code> 原子引用 + 时间戳</p><div class="note success simple"><ul><li>不仅维护了对象的值, 还维护了一个时间戳 <del>可以为任意数字, 仅表示状态</del></li><li>当对象方式改变的时候, 除了修改对象值, 还会修改时间, 至有当对象值和时间戳都相同时, 才会写入成功</li></ul></div></li></ul><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="aba-3"><ul><li><p><code>AtomicStampedReference</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicStampedReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; count = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: version: &quot;</span> + count.getStamp() + <span class="string">&quot; count = &quot;</span> + count.getReference());</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            count.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, count.getStamp(), count.getStamp() + <span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: version: &quot;</span> + count.getStamp() + <span class="string">&quot; count = &quot;</span> + count.getReference());</span><br><span class="line">            count.compareAndSet(<span class="number">101</span>, <span class="number">100</span>, count.getStamp(), count.getStamp() + <span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: version: &quot;</span> + count.getStamp() + <span class="string">&quot; count = &quot;</span> + count.getReference());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = count.getStamp();</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; :: version: &quot;</span> + stamp);</span><br><span class="line">            System.out.println(count.compareAndSet(<span class="number">100</span>, <span class="number">102</span>, stamp, stamp + <span class="number">1</span>) + <span class="string">&quot; count = &quot;</span> + count.getReference());</span><br><span class="line">            System.out.println(<span class="string">&quot;current stamp: &quot;</span> + count.getStamp());</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031142539780.png" alt="AtomicStampReference 结果" style="zoom:67%;" /></li></ul><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="集合类线程问题"><a href="#集合类线程问题" class="headerlink" title="集合类线程问题"></a>集合类线程问题</h1><ol><li><p>ArrayList / Set / Map</p><div class="tabs" id="list"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#list-1">代码描述</button></li><li class="tab"><button type="button" data-href="#list-2">解决方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="list-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                list.add(RandomUtil.randomString(<span class="number">8</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="list-2"><ol><li><p><strong>new Vectory&lt;&gt;();</strong></p><blockquote><p>public synchronized boolean add(E e);</p><p>通过 synchronized 加锁 效率低</p></blockquote></li><li><p><strong>Collections.synchronizedList(new ArrayList&lt;&gt;());</strong></p><blockquote><p>通过工具类生成</p></blockquote></li><li><p><strong>new CopyOnWriteArrayList&lt;&gt;();</strong></p><blockquote><p>import java.util.concurrent.CopyOnWriteArrayList;</p><p>并发包下, 写时复制</p></blockquote></li></ol><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ol></li></ol><hr><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="公平锁-非公平锁"><a href="#公平锁-非公平锁" class="headerlink" title="公平锁 / 非公平锁"></a>公平锁 / 非公平锁</h2><ul><li><p><strong>公平锁</strong></p><div class="note primary simple"><p>多个线程按照申请锁的顺序去获得锁, 线程会直接进入到队伍排队, 永远都是队列的第一位才能获得锁.</p></div><ul><li>优点 : <ul><li>所有线程都能够得到资源, 不会一直在等待队列. </li></ul></li><li>缺点 : <ul><li>吞吐量会下降, 队列里除了第一个线程, 其他的线程都会进入等待队列, <strong>CPU</strong> 唤醒阻塞线程的开销会很大. </li></ul></li></ul></li><li><p><strong>非公平锁</strong></p><div class="note primary simple"><p>多个线程去获取锁的时候, 会直接尝试获取, 获取不到, 再进入等待队列, 如果能够获取到, 就直接获取到锁.</p></div><ul><li>优点 : <ul><li>可以减少 <strong>CPU</strong> 唤醒线程的开销, 整体的吞吐量效率会提升, <strong>CPU</strong> 也不必唤醒所有线程, 会减少唤醒线程的数量. </li></ul></li><li>缺点 : <ul><li>队列中间的线程可能会长时间获取不到锁, 导致饿死</li></ul></li></ul></li><li><p>常用锁: </p><ul><li><p><strong>ReentrantLock</strong></p><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031221654082.png" alt="ReentrantLock" style="zoom:67%;" /><div class="note success simple"><p>ReentrantLock 默认时非公平锁, 指定参数为 true 表示为公平锁</p></div><p><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031222002555.png" alt="sync 继承结构"></p><p>Sync 有两个子类 <strong>公平锁</strong> 和 <strong>非公平锁</strong></p><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031222412833.png" alt="尝试获取锁的过程" style="zoom:67%;" /><div class="note info simple"><p><strong>int c = getState();</strong>  表示获取当前锁的状态 0 为空 1 为已占有</p><p><strong>compareAndSetState(0, acquires)</strong> 当&amp;&amp; 前为true时, 比较当前锁的占有情况, 为0 占有当前锁</p></div><p><strong>hasQueuedPredecessors()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node t = tail; <span class="comment">// 队尾节点</span></span><br><span class="line">        Node h = head; <span class="comment">// 头节点</span></span><br><span class="line">        Node s;</span><br><span class="line">        <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">            ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info simple"><p><strong>h != t</strong> 表示当前队尾元素不等于队首元素 ~~队列必有两个或以上的节点</p><p><strong>(s = h.next) == null</strong>  Node s 为队列第二个节点 为空 </p><p><strong>s.thread != Thread.currentThread()</strong> Node s的线程为当前线程</p></div></li></ul></li></ul><hr><h2 id="可重入锁-递归锁"><a href="#可重入锁-递归锁" class="headerlink" title="可重入锁 递归锁"></a>可重入锁 <del>递归锁</del></h2><p><font color="red" size=5>避免死锁</font></p><div class="note primary simple"><p> 在同一个线程的外部获取锁, 在进入内层方法时会自动获取到锁</p><p>线程可以进入任意一个它自己已经拥有的锁的同步代码块</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    method2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个线程在持有 <strong>method1()</strong> 的锁之后, 会自动拥有 <strong>method2()</strong> 的锁</p></blockquote><div class="note success simple"><p><strong>ReentrantLock</strong> 和 <strong>Synchironized</strong> 是典型的可重入锁</p></div><div class="tabs" id="demo"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#demo-1">Synchronized</button></li><li class="tab"><button type="button" data-href="#demo-2">ReentrantLock</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="demo-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;invoke eat&quot;</span>);</span><br><span class="line">        sleep();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;invoke sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                user.eat();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                user.eat();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031231716053.png" alt="Synchronized 结果" style="zoom:67%;" /><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="demo-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; eat invoke ...&quot;</span>);</span><br><span class="line">            sleep();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; sleep invoke ...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runner runner = <span class="keyword">new</span> Runner();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(runner);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(runner);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201031232836148.png" alt="ReentrantLock 结果" style="zoom:67%;" /><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="自旋锁-spinlock"><a href="#自旋锁-spinlock" class="headerlink" title="自旋锁 spinlock"></a>自旋锁 <del>spinlock</del></h2><div class="note primary simple"><p>尝试获取锁的线程不会立即阻塞, 而是采用 <strong>循环的方法去尝试获取锁</strong> , 这样的好处是减少了上线程下文切换的消耗, 缺点是循环会消耗 <strong>CPU</strong></p></div><p><strong>Unsafe</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**原子引用线程*/</span></span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; come in ...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="keyword">null</span>, thread)) &#123;</span><br><span class="line">            <span class="comment">// 和期望值不同</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; go out ...&quot;</span>);</span><br><span class="line">        atomicReference.compareAndSet(thread, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SpinLockDemo spinLock = <span class="keyword">new</span> SpinLockDemo();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            spinLock.myLock();</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            spinLock.myUnlock();</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            spinLock.myLock();</span><br><span class="line">            spinLock.myUnlock();</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201101002225745.png" alt="自旋锁_结果" style="zoom:67%;" /><hr><h2 id="读-共享锁-写-独占锁-互斥锁"><a href="#读-共享锁-写-独占锁-互斥锁" class="headerlink" title="读 共享锁 写 独占锁 互斥锁"></a>读 <del>共享锁</del> 写 <del>独占锁</del> 互斥锁</h2><div class="note info simple"><p><strong>独占锁</strong> - &gt; 该锁一次只能被一个线程占用 <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">例子<br>  </button><span class="hide-content"><strong>ReentrantLock</strong> <strong>Synchronized</strong></span></span></p><p><strong>共享锁</strong> -&gt; 该锁可以被多个线程所持有</p><p>对 <strong>ReentrantReadWriteLock</strong> 来说, 其读锁就是共享锁, 写锁就是独占锁</p></div><div class="note danger simple"><p>读锁的共享锁可以保证的并发读是非常高效的;</p><p><strong>读写</strong>, <strong>写读</strong>, <strong>写写</strong> 的过程是互斥的</p></div><div class="tabs" id="rwl"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#rwl-1">原始</button></li><li class="tab"><button type="button" data-href="#rwl-2">读写锁优化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="rwl-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 写: 原子 + 独占</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在写入: &quot;</span> + key);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写入完成: &quot;</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读: 共享</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在读取: &quot;</span> + key);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        Object obj = map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读取完成: &quot;</span> + obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCache cache = <span class="keyword">new</span> MyCache();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                cache.put(tempInt + <span class="string">&quot;&quot;</span>, tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, <span class="string">&quot;p&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                cache.get(tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, <span class="string">&quot;g&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201101010242461.png" alt="读操作存在空值" style="zoom:50%;" /><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="rwl-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rwLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="comment">// 写: 原子 + 独占</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        rwLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在写入: &quot;</span> + key);</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 写入完成: &quot;</span> + key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读: 共享</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 正在读取: &quot;</span> + key);</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            Object obj = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 读取完成: &quot;</span> + obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyCache cache = <span class="keyword">new</span> MyCache();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                cache.put(tempInt + <span class="string">&quot;&quot;</span>, tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, <span class="string">&quot;p&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                cache.get(tempInt + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, <span class="string">&quot;g&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201101011105630.png" alt="读写锁_结果正常" style="zoom:50%;" /><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><ul><li><p><code>java.util.concurrent;</code></p></li><li><p>是一个程序计数器, 是一个线程在其余线程执行完毕之后才可以执行</p><div class="note primary simple"><p>目标线程处于 <code>awiait()</code> 状态</p><p>其余线程进行操作, 操作结束执行 <code>countDown()</code> 表示当前线程任务结束, 计数器减一</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 线程完成任务, 可以离开&quot;</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125; , <span class="string">&quot;t&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">        latch.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;最后离开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201101202436784.png" alt="CountDownLatch" style="zoom: 67%;" /><hr><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2></li><li><p><code>java.util.concurrent;</code></p></li><li><p>是一个可循环 <strong>(Cyclic)</strong> 使用的屏障 <strong>(Barrier)</strong>, 一组线程到达一个屏障 <del>同步点</del>, 必须等待其余线程一同到达, 直到最后一个线程到达, 才会进行工作</p><div class="note primary simple"><p>线程到达屏障后会运行 <code>await()</code> 方法, 进入阻塞状态</p><p>当 <code>await()</code> 线程数量达到指定数量, 就会开启屏障, 并执行 <code>CyclicBarrier</code>内的 <code>Runnable</code> 方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程到齐, 开始工作&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalInt = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第: &quot;</span> + finalInt + <span class="string">&quot;个线程到达屏障, 剩余: &quot;</span> + (<span class="number">7</span> - finalInt) + <span class="string">&quot;个线程&quot;</span>);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            &#125;, <span class="string">&quot;t&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201101205338797.png" alt="CyclicBarrier" style="zoom:67%;" /></li></ul><hr><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><ul><li><p><code>java.util.concurrent</code></p></li><li><p>是一个计数信号量, 当线程同时执行时, 会获取令牌, 只有拥有令牌的线程才可以执行操作, 当线程执行完毕后会返还令牌; 可以控制当前项目的并发数</p><div class="note primary simple"><p>当线程运行时, 通过  <code>acquire()</code> 获取令牌, 拥有令牌才可以执行线程任务</p><p>当线程执行完毕之后, 会通过 <code>release()</code> 方法释放令牌, 其他线程获取令牌后执行各自任务</p><p><code>public Semaphore(int permits, boolean fair);</code> 设置 <code>fair</code> 可以控制公平锁, 默认时 <code>false</code></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 获取令牌 开始执行任务&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 释放令牌&quot;</span>);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;t&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201101210730525.png" alt="Semaphore" style="zoom:67%;" /><hr><h1 id="Block-Queue"><a href="#Block-Queue" class="headerlink" title="Block Queue"></a>Block Queue</h1><div class="note danger simple"><p>施工中</p></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Volatile </tag>
            
            <tag> CAS </tag>
            
            <tag> Lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="2020/10/27/nginx/"/>
      <url>2020/10/27/nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-限流策略"><a href="#Nginx-限流策略" class="headerlink" title="Nginx 限流策略"></a>Nginx 限流策略</h1><ul><li>控制速率</li><li>控制并发连接数</li></ul><hr><h1 id="控制速率"><a href="#控制速率" class="headerlink" title="控制速率"></a>控制速率</h1><h2 id="漏桶算法-Leaky-Bucket"><a href="#漏桶算法-Leaky-Bucket" class="headerlink" title="漏桶算法 Leaky Bucket"></a>漏桶算法 <code>Leaky Bucket</code></h2><p><strong>def:</strong> </p><blockquote><p>请求到达桶内,桶会以一定的速度出水,当水流过大时会直接<code>溢出</code>.可以强行限制传输速率.</p></blockquote><img src= "/img/loading.gif" data-lazy-src="https://nano-hexo-blog.oss-cn-beijing.aliyuncs.com/img/image-20201027152042566.png" alt="nginx漏桶算法原理" style="zoom:67%;" /><p><strong>issue</strong>:</p><ul><li>突发情况请求突然激增,多余平均数的请求会被抛弃</li></ul><p><strong>nginx 配置:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># binary_remote_addr 是一种key 表示基于 remote_addr限流 binary 压缩内存 myRateLimit:10m 划分一个10m的内存空间叫myRateLimit</span></span><br><span class="line"><span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone = myRateLimit:<span class="number">10m</span> rate = 1r/s;</span><br><span class="line">...</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="attribute">location</span> /search/ &#123;</span><br><span class="line"><span class="attribute">limit_req</span> zone = one brust=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown测试</title>
      <link href="2020/10/27/markdown%E6%B5%8B%E8%AF%95/"/>
      <url>2020/10/27/markdown%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown-测试"><a href="#markdown-测试" class="headerlink" title="markdown 测试"></a>markdown 测试</h1><div class="note simple"><p>默认提示</p></div><div class="note default simple"><p>default  提示</p></div><div class="note primary simple"><p>primary 提示</p></div><div class="note success simple"><p>success 提示</p></div><div class="note info simple"><p>info 提示</p></div><div class="note warning simple"><p>warning 提示</p></div><div class="note danger simple"><p>danger 提示</p></div><ul><li>无序<ul><li>无序</li></ul></li><li>无序</li></ul><ol><li>有序</li><li>有序<ol><li>有序</li></ol></li></ol><a class="btn-beautify button--animated " href="http://www.baidu.com"   title="Nano"><span>Nano</span></a><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">测试  </button><span class="hide-content">测试成功</span></span><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">test 1</button></li><li class="tab"><button type="button" data-href="#test-2">test 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><table><thead><tr><th>测试</th><th>测试</th></tr></thead><tbody><tr><td>测试</td><td>测试</td></tr></tbody></table><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>测试</p><p><a class="btn-beautify button--animated " href="http://www.baidu.com"   title="Nano"><span>Nano</span></a></p><button type="button" class="tab-to-top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> normal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/27/hello-world/"/>
      <url>2020/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
